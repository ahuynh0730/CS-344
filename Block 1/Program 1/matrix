#!/bin/bash

datafilepath="datafile$$"
if [ $# = 1 ]; then
	cat > "$datafilepath"
elif [ $# = 2 ]; then
	datafilepath=$2
fi

numberRows=0
numberColumns=0
newLine=""
newMatrix=""

# echos number of rows followed by a space and number of columns
dims(){

	while read myLine
	do
		# will increment numberRows by 1 each time a new line is detected
		numberRows=`expr $numberRows + 1`
		
		# will count total number of elements and then divide by number of rows to get number of columns
		for i in $myLine
		do
			numberColumns=`expr $numberColumns + 1`
		done	
		
	
	done < $1
	
	#divides numberColumns(currently total count of all numbers) by numberRows to get numberColumns
	numberColumns=`expr $numberColumns / $numberRows`
}

transpose(){
	# cut starts from 1, so have to offset
	column=1
	
	#loops through each column
	while [ $column -lt `expr $numberColumns + 1` ]
	do
		
		#cuts each column into newLine then replaces all \n with \t to make one row
		newLine=`cut -f $column $datafilepath`
		newLine=$(echo "$newLine" | tr '\n' '\t')
		
		# removing the trailing \the
		newLine=${newLine%?}
		
		# starts a new line if it is not the first line
		if [ $column -ne 1 ]; then
			newMatrix+="\n"
		fi
		
		#adds newLine to newMatrix and then increases column
		newMatrix+="$newLine"
		column=`expr $column + 1`
	done
	echo -e "$newMatrix"
}

# if first argument is dims
if [ $1 = "dims" ]; then
	
	# if too many arguments were inserted
	if [ $# -gt 2 ]; then
		echo "Too many arguments" 1>&2
		exit 1
	fi
	
	# if second argument was an invalid file
	if [[ ! -f "$datafilepath" ]]; then
		echo "Not a valid file" 1>&2
		exit 1
	fi
	
	# if file cannot be read
	if [[ ! -r "$datafilepath" ]]; then
		echo "File could not be read" 1>&2
		exit 1
	fi
	
	# will call dims if amount of arguments was correct and second argument was a valid file
	dims $datafilepath
	echo "$numberRows $numberColumns"

elif [ $1 = "transpose" ]; then

	# if too many arguments were inserted
	if [ $# -gt 2 ]; then
		echo "Too many arguments" 1>&2
		exit 1
	fi
	
	# if second argument was an invalid file
	if [[ ! -f "$datafilepath" ]]; then
		echo "Not a valid file" 1>&2
		exit 1
	fi
	
	# if file cannot be read
	if [[ ! -r "$datafilepath" ]]; then
		echo "File could not be read" 1>&2
		exit 1
	fi
	
	#will call transpose if all requirements are met
	dims $datafilepath
	transpose $datafilepath

fi




