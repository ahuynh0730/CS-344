#!/bin/bash


numberRows=0
numberColumns=0
newLine=""
newMatrix=""
lineNum=1

# echos number of rows followed by a space and number of columns, will not reset global variables
dims(){

	while read myLine
	do
		# will increment numberRows by 1 each time a new line is detected
		numberRows=`expr $numberRows + 1`
		
		# will count total number of elements and then divide by number of rows to get number of columns
		for i in $myLine
		do
			numberColumns=`expr $numberColumns + 1`
		done	
		
	
	done < $1
	
	#divides numberColumns(currently total count of all numbers) by numberRows to get numberColumns
	numberColumns=`expr $numberColumns / $numberRows`
}

# transposes a matrix
transpose(){
	# cut starts from 1, so have to offset
	column=1
	#loops through each column
	while [ $column -lt `expr $numberColumns + 1` ]
	do
		
		#cuts each column into newLine then replaces all \n with \t to make one row
		newLine=`cut -f $column $datafilepath`
		newLine=$(echo "$newLine" | tr '\n' '\t')
				
		# removing the trailing \t
		newLine=${newLine%?}
		
		# starts a new line if it is not the first line
		if [ $column -ne 1 ]; then
			newMatrix+="\n"
		fi
		
		#adds newLine to newMatrix and then increases column
		newMatrix+="$newLine"
		column=`expr $column + 1`
	done
}

# determines the mean of each column of column of a matrix
# calculates the mean by taking the transpose of the matrix and sums across the rows then
# divides by how many items there are
mean(){

	columnAverages=""
	while read fileLine
	do
		sum=0
		count=0	
		average=0
		
		# sums up each line and increases count by one on every number
		for i in $fileLine
		do
			num=$i
			sum=`expr $sum + $num`
			count=`expr $count + 1`
		done
		
		#calculates average
		average=$(( ($sum + ($count/2)*( ($sum>0)*2-1 )) / $count ))
		
		# will insert tab before the average unless it is the average of the first column
		if [ $lineNum -ne 1 ]; then
			columnAverages+="\t"
		fi
		
		
		# concatenates newly calculated average with other column averages and increments lineNum
		columnAverages+=$average
		lineNum=`expr $lineNum + 1`
		
	done < $1
	echo -e "$columnAverages"
}


# adds two matrices together
add(){
	newMatrix=""
	currentRow=0
	currentColumn=0
	
	# making temp files for each file as a single column
	while read -u 3 left && read -u 4 right
	do
		for i in $left 
		do
			echo -e "$i" >> tempLeftFile
		done
		
		for i in $right
		do
			echo -e "$i" >> tempRightFile
		done

	done 3< $1 4< $2

	# sums up each line of the temp files
	while read -u 3 left && read -u 4 right
	do
		sum=0
		for i in $left
		do
			sum=`expr $sum + $left + $right`
			
			#inserts tab before field if not first column
			if [ $currentColumn -ne 0 ]; then
				newMatrix+="\t"
			fi
			
			newMatrix+="$sum"
			currentColumn=`expr $currentColumn + 1`
			
			# will start a new row if the current column equals the number of columns
			if [ $currentColumn -eq $numberColumns ]; then
				currentRow=`expr $currentRow + 1`
				currentColumn=0
				if [ $currentRow -ne $numberRows ]; then
					newMatrix+="\n"
				fi
			fi
		done
	done 3<tempLeftFile 4<tempRightFile
	
	# removing temp files
	rm tempLeftFile
	rm tempRightFile
	
	# echos out matrix after addition
	echo -e "$newMatrix"
	
}

# multiplies two matrices together
multiply(){
	sum=0
	product=0
	newLeft=""
	newRight=""
	
	# reads in left file and creates a single column 
	while read -u 3 left
	do
		newLine=""
		currentColumn=0
		for i in $left 
		do
			newLine+="$i"
			newLine+="\n"
		done
		
		while [ $currentColumn -lt $m2columns ]
		do
			currentColumn=`expr $currentColumn + 1`
			newLeft+=$newLine
		done
		
	done 3< $1
	
	# removing the trailing \n
	newLeft=${newLeft%?}
	newLeft=${newLeft%?}
	
	# writes newLeft variable to tempLeftFile
	for i in $newLeft
	do
		echo -e "$i" > tempLeftFile
	done
	
	# makes new right into a single column
	newLine=""
	while read -u 4 right
	do
		for i in $right
		do
			newLine+="$i"
			newLine+="\n"
		done
	done 4< $2
	
	# appends newRight however many times necessary to currentRow
	currentRow=0
	while [ $currentRow -lt $m1rows ]
	do
		currentRow=`expr $currentRow + 1`
		newRight+=$newLine
	done
	
	# removes extra new lines
	newRight=${newRight%?}
	newRight=${newRight%?}
	
	# writes to tempRightFile
	for i in $newRight
	do
		echo -e "$i" >> tempRightFile
	done
	
	multCount=0
	product=0
	sum=0
	newMatrix=""
	currentColumn=1
	
	# reads in tempLeftFile and #tempRightFile
	while read -u 3 left && read -u 4 right
	do
		for i in $left
		do
			# product is left times right, sum is previous sum plus product
			product=`expr $left '*' $right`
			sum=`expr $sum + $product`
			multCount=`expr $multCount + 1`
			
			# if number of times multiplied is equal to m1columns, will add the sum to new matrix
			# and insert a tab or line, then reset sum to 0
			if [ $multCount -eq $m1columns ]; then
				newMatrix+=$sum
				if [ $currentColumn -eq $m2columns ]; then
					newMatrix+="\n"
					currentColumn=1
				else
					newMatrix+="\t"
					currentColumn=`expr $currentColumn + 1`
				fi
				multCount=0
				sum=0
			fi
			
			
		done
	done 3<tempLeftFile 4<tempRightFile
	
	# removes trailing new line before echoing out
	newMatrix=${newMatrix%?}
	newMatrix=${newMatrix%?}
	echo -e "$newMatrix"
	
	#removing temporary files
	rm tempLeftFile
	rm tempRightFile
}

# if first argument is dims or transpose or mean
if [ $1 = "dims" ] || [ $1 = "transpose" ] || [ $1 = "mean" ]; then
	
	datafilepath="datafile$$"
	if [ $# = 1 ]; then
		cat > "$datafilepath"
	elif [ $# = 2 ]; then
		datafilepath=$2
	fi
	
	# if too many arguments were inserted
	if [ $# -gt 2 ]; then
		echo "Too many arguments" 1>&2
		exit 1
	fi
	
	# if second argument was an invalid file
	if [[ ! -f "$datafilepath" ]]; then
		echo "Not a valid file" 1>&2
		exit 1
	fi
	
	# if file cannot be read
	if [[ ! -r "$datafilepath" ]]; then
		echo "File could not be read" 1>&2
		exit 1
	fi
	
	# will call dims if amount of arguments was correct and second argument was a valid file
	dims $datafilepath
	
	# if first argument is dims, then will echo dimensions out
	if [ $1 = "dims" ]; then
		echo "$numberRows $numberColumns"
		exit 0
	fi

	
	# will transpose matrix and echo out if first argument was transpose
	transpose $datafilepath
	if [ $1 = "transpose" ]; then
		echo -e "$newMatrix"
		exit 0
	fi
	
	# puts transposed matrix in a new file to use for mean and then removes it
	echo -e "$newMatrix" > tempMatrix89574
	mean tempMatrix89574
	rm tempMatrix89574


# if first argument is add
elif [ $1 = "add" ] || [ $1 = "multiply" ]; then

	
	# if the wrong number of arguments were inserted
	if [ $# -ne 3 ]; then
		echo "Wrong number of arguments" 1>&2
		exit 1
	fi
	
	# if either file cannot be read
	if [[ ! -r "$2" ]] || [[ ! -r "$3" ]]; then
		echo "File could not be read" 1>&2
		exit 1
	fi
	
	# if first argument is add
	if [ $1 = "add" ]; then
		m1dimensions=""
		m2dimensions=""
		
		# gets dimensions of both files to compare them
		dims $2
		m1dimensions+="$numberRows $numberColumns"
		numberRows=0
		numberColumns=0
		dims $3
		m2dimensions+="$numberRows $numberColumns"
		
		if [ "$m1dimensions" != "$m2dimensions" ]; then
			echo "File dimensions did not match" 1>&2
			exit 1
		fi
		
		add $2 $3
	fi


	#if first argument is multiply
	if [ $1 = "multiply" ]; then
		m1rows=0
		m1columns=0
		m2rows=0
		m2columns=0
		
		#gets dimensions of both files to compare
		dims $2
		m1rows=$numberRows
		m1columns=$numberColumns
		numberRows=0
		numberColumns=0
		dims $3
		m2rows=$numberRows
		m2columns=$numberColumns
		
		if [ $m1columns -ne $m2rows ]; then
			echo "Incorrect file dimensions" 1>&2
			exit 1
		fi
		
		datafilepath=$3
		transpose $3
		echo -e "$newMatrix" > tempMatrix89547

		multiply $2 tempMatrix89547
		rm tempMatrix89547
	fi

#any other commands other than those possible
else
	echo "Invalid command" 1>&2
	exit 1

fi






